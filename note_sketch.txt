// Model matrix : an identity matrix (model will be at the origin)
	glm::mat4 model_mat = glm::mat4(1.0f);
	glm::mat4 model_rot = glm::mat4(1.0f);
	glm::vec3 model_pos = glm::vec3(-3, 0, -3);

	// generate a camera view, based on eye-position and lookAt world-position
	glm::mat4 view_mat = genView(glm::vec3(2, 2, 20), model_pos);

	{
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		glm::mat4 trans =
			glm::translate(glm::mat4(1.0f), model_pos); // reposition model
		model_rot = glm::rotate(model_rot,
		                        glm::radians(0.8f),
		                        glm::vec3(0, 1, 0)); // rotate model on y axis
		model_mat = trans * model_rot;

		// build a model-view-projection
		GLint w, h;
		glfwGetWindowSize(window, &w, &h);
		glm::mat4 mvp = genMVP(view_mat, model_mat, 45.0f, w, h);

		// ??
		glUniformMatrix4fv(MVP_u, 1, GL_FALSE, &mvp[0][0]);

		drawModel(vao, model);